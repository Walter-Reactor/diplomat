#include <nanobind/nanobind.h>
#include <nanobind/operators.h>
#include <nanobind/stl/unique_ptr.h>
#include <nanobind/stl/string_view.h>
#include <nanobind/stl/string.h>
#include <nanobind/stl/optional.h>
#include <nanobind/stl/function.h>
#include <nanobind/stl/vector.h>
#include <nanobind/stl/detail/nb_list.h>
#include <nanobind/ndarray.h>
#include <../src/nb_internals.h>  // Required for shimming

{%- for include in includes %}
#include "{{ include }}"
{%- endfor %}

namespace nb = nanobind;
using namespace nb::literals;

// Nanobind does not usually support custom deleters, so we're shimming some of the machinery to add that ability.
// On module init, the dummy type will have the normal nanobind inst_dealloc function in the tp_dealloc slot, so we
// pull it out, store it here, and then call it in the tp_dealloc function we are shimming in to all our types.
// Our custom tp_dealloc function will call the tp_free function instead of `delete`, allowing us effectively to override
// the delete operator.
// See https://nanobind.readthedocs.io/en/latest/lowlevel.html#customizing-type-creation and
// https://github.com/wjakob/nanobind/discussions/932
static void (*nb_tp_dealloc)(void *) = nullptr;

void diplomat_tp_dealloc(PyObject *self)
{
    using namespace nb::detail;
    PyTypeObject *tp = Py_TYPE(self);
    const type_data *t = nb_type_data(tp);

    nb_inst *inst = (nb_inst *)self;
    void *p = inst_ptr(inst);
    if (inst->destruct)
    {
        inst->destruct = false;
        check(t->flags & (uint32_t)type_flags::is_destructible,
              "nanobind::detail::inst_dealloc(\"%s\"): attempted to call "
              "the destructor of a non-destructible type!",
              t->name);
        if (t->flags & (uint32_t)type_flags::has_destruct)
            t->destruct(p);
    }
    if (inst->cpp_delete)
    {
        inst->cpp_delete = false;
        auto tp_free = (freefunc)(PyType_GetSlot(tp, Py_tp_free));
        (*tp_free)(p);
    }
    (*nb_tp_dealloc)(self);
}

struct _Dummy {};

namespace nanobind::detail
{
    // Nanobind does not ship with support for casting char32_t, which seems to be an oversight.
    // Remove this block when upstream support is added
    template <>
    struct type_caster<char32_t>
    {
        using Value = char32_t;
        Value value;
        Py_ssize_t size;
        static constexpr auto Name = const_name("str");
        template <typename T>
        using Cast = char32_t;

        bool from_python(handle src, uint8_t, cleanup_list *) noexcept
        {
            value = PyUnicode_ReadChar(src.ptr(), 0);
            if (!value)
            {
                PyErr_Clear();
                return false;
            }
            size = PyUnicode_GetLength(src.ptr());
            return true;
        }

        static handle from_cpp(const char32_t *value, rv_policy,
                               cleanup_list *) noexcept
        {
            if (value == nullptr)
            {
                PyObject *result = Py_None;
                Py_INCREF(result);
                return result;
            }
            size_t len = 0;
            const char32_t *str = value;
            while (*str != U'\0')
            {
                len++;
                str++;
            }
            return PyUnicode_DecodeUTF32(reinterpret_cast<const char *>(value), len * 4, nullptr, nullptr);
        }

        static handle from_cpp(char32_t value, rv_policy, cleanup_list *) noexcept
        {
            return PyUnicode_DecodeUTF32(reinterpret_cast<const char *>(&value), 4, nullptr, nullptr);
        }

        template <typename T_>
        NB_INLINE bool can_cast() const noexcept
        {
            return (value && size == 1);
        }

        explicit operator char32_t()
        {
            if (can_cast<char32_t>())
                return value;
            else
                throw next_overload();
        }
    };

    template <typename T, typename E>
	struct type_caster<diplomat::result<T, E>>
	{
		using Value = diplomat::result<T, E>;
		Value value;
		Py_ssize_t size;
		using Caster = make_caster<T>;
		static constexpr auto Name = Caster::Name;

		static handle from_cpp(diplomat::result<T, E> value, rv_policy p, cleanup_list *cl) noexcept
		{
			if (value.is_ok()) {
				return Caster::from_cpp(forward_like_<T>(std::move(value).ok().value()), p, cl);
			}

			auto errorPyV = nb::cast(std::move(std::move(value).err().value()));
			if (errorPyV.is_valid())
			{
				PyErr_SetString(PyExc_Exception, nb::str(errorPyV).c_str());
			}
			else
			{
				char error_msg[512];
				snprintf(error_msg, sizeof(error_msg), "Cannot convert unknown type %s to string for python error.", typeid(E).name());
				PyErr_SetString(PyExc_Exception, error_msg);
			}

            return nullptr;
		}

		NB_INLINE bool can_cast() const noexcept { return Caster::template can_cast<T>(); }
	};

    template <typename T>
    class type_caster<diplomat::span<T>>
    {
        // The type referenced by the span, with const removed.
        using value_type = std::remove_cv_t<T>;
        // Avoid pitfalls with std::vector<bool>
        using ListCaster = list_caster<std::vector<std::conditional_t<std::is_same_v<bool, value_type>, uint8_t, value_type>>, value_type>;
        static_assert(sizeof(bool) == sizeof(uint8_t), "bool representation size is unexpected!");

        std::optional<ListCaster> list_caster;

    public:
        using Value = diplomat::span<T>;
        Value value = diplomat::span<T>(nullptr, 0);

        static constexpr auto Name = ListCaster::Name;

        // We do not allow moving because 1) spans are super lightweight, so there's
        // no advantage to moving and 2) the span cannot exist without the caster,
        // so moving leaves an implicit dependency (while a reference or pointer
        // make that dependency explicit).
        template <typename T_>
        using Cast = movable_cast_t<T_>;
        operator Value *() { return &value; }
        operator Value &() { return value; }

        // Cast Python -> C++ (nb::cast call)
        bool from_python(handle src, uint8_t flags, cleanup_list *cleanup) noexcept
        {
            uint8_t local_flags = flags_for_local_caster<T>(flags);

            // First try to convert from ndarray for efficiency
            // Try to get a 1D contiguous array directly using type tags
            if constexpr (is_ndarray_scalar_v<T>)
            {
                auto caster = make_caster<nb::ndarray<T, ndim<1>>>();
                if (caster.from_python(src, local_flags, cleanup))
                {
                    // Create a span from the array data
                    value = diplomat::span<T>(caster.value.data(), caster.value.shape(0));
                    return true;
                }
            }

            // Attempt to convert a native sequence. If the is_base_of_v check passes,
            // the elements do not require converting and pointers do not reference a
            // temporary object owned by the element caster. Pointers to converted
            // types are not allowed because they would result a dangling reference
            // when the element caster is destroyed.
            if (std::is_const_v<T> &&
                (!std::is_pointer_v<T> || is_base_caster_v<make_caster<T>>))
            {
                list_caster.emplace();
                if (list_caster->from_python(src, local_flags, cleanup))
                {
                    // Reinterpret cast here is required to handle vector<bool>
                    value = diplomat::span<T>(reinterpret_cast<T *>(list_caster->value.data()), list_caster->value.size());
                    return true;
                }
                else
                {
                    list_caster.reset();
                }
            }

            return false; // Python type cannot be loaded into a span.
        }

        // Cast C++ -> Python (when returning a span from a C++ function)
        static handle from_cpp(diplomat::span<T> src, rv_policy policy, cleanup_list *cleanup)
        {
            return ListCaster::from_cpp(src, policy, cleanup);
        }
    };
}

NB_MODULE({{module_name}}, {{module_name}}_mod)
{
	{
		nb::class_<_Dummy> dummy({{module_name}}_mod, "__dummy__");
		nb_tp_dealloc = (void (*)(void *))nb::type_get_slot(dummy, Py_tp_dealloc);
	}

    nb::class_<std::monostate>({{module_name}}_mod, "monostate")
		.def("__repr__", [](const std::monostate &)
			 { return ""; })
		.def("__str__", [](const std::monostate &)
			 { return ""; });

	{%- for line in body.lines() %}
    {{ line }}
	{%- endfor %}
}
